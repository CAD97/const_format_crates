name: Rust

on: [push, pull_request]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      max-parallel: 2
      matrix:
        rust: [stable, beta, nightly, 1.46.0]

    steps:
    - uses: actions/checkout@v2
    - name: ci-all-versions
      run: |
        rustup override set ${{ matrix.rust }}
        cargo update
          
        cd "${{github.workspace}}/const_format_proc_macros/"
        cargo test

        cd "${{github.workspace}}/const_format/"
        cargo test --features "testing"

    - uses: actions/checkout@v2
    - name: ci-stable
      # apparently github hadn't updated stable by 2021-03-27?
      if: ${{ matrix.rust == 'beta' }}
      run: |
        cargo update
        cd "${{github.workspace}}/const_format/"
        cargo test --features "testing const_generics"


    - uses: actions/checkout@v2
    - name: ci-nighly
      if: ${{ matrix.rust == 'nightly' && runner.os == 'Linux' }}
      run: |
        rustup override set ${{ matrix.rust }}

        cargo update -Z minimal-versions
        
        cd "${{github.workspace}}/const_format_proc_macros/"
        cargo test

        cd "${{github.workspace}}/const_format/"
        
        cargo test --features "testing"
        cargo test --features "testing fmt"
        cargo test --features "testing assert"
        cargo test --features "testing derive"
        cargo test --features "testing constant_time_as_str"
        cargo test --features "testing derive constant_time_as_str"
        cargo test --features "testing derive constant_time_as_str assert"

        MIRI_NIGHTLY=nightly-$(curl -s https://rust-lang.github.io/rustup-components-history/x86_64-unknown-linux-gnu/miri)
        echo "Installing latest nightly with Miri"
        echo "$MIRI_NIGHTLY"
        rustup set profile minimal
        rustup default "$MIRI_NIGHTLY"
        rustup override set "$MIRI_NIGHTLY"
        rustup component add miri
        cargo miri setup

        cargo clean 

        cargo miri test --features "testing"
        cargo miri test --features "testing fmt"
        cargo miri test --features "testing assert"
        cargo miri test --features "testing derive"
        cargo miri test --features "testing constant_time_as_str"
        cargo miri test --features "testing derive constant_time_as_str"
        cargo miri test --features "testing derive constant_time_as_str assert"
